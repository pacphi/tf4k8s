locals{
  project = "<project-id>"
  acme_email = "<valid-email-address>"
  iaas = "<cloud-provider>" # e.g., aws, azure, or gcp
  registry_domain       = "<domain>" # e.g., harbor.lab.jilted.io
  registry_repository   = "<domain>/library"
  registry_username     = "admin"
  registry_password     = "<registry-password>"
  kubeconfig_path = "</path/to/kubeconfig>"
  ytt_lib_dir = "${path.module}/../../../ytt-libs"
}

provider "kubernetes" {
  config_path = local.kubeconfig_path
}

provider "helm" {
  kubernetes {
    config_path = local.kubeconfig_path
  }
  version = "~> 1.2.0"
}

provider "k14s" {
  kapp {
    kubeconfig_yaml = file(local.kubeconfig_path)
  }
}

module "cf-for-k8s" {
  source = "../../../modules/cf4k8s"

  ytt_lib_dir      = local.ytt_lib_dir
  domain           = module.dns.base_domain

  tls_cert    = module.acme.cert_full_chain
  tls_key     = module.acme.cert_key
  tls_ca_cert = module.acme.cert_ca

  registry_domain       = local.registry_domain
  registry_repository   = local.registry_repository
  registry_username     = local.registry_username
  registry_password     = local.registry_password
}

module "acme" {
  source = "../../modules/acme/${local.iaas}"

  project = local.project
  common_name = "*.${module.cf-for-k8s.sys_domain}"
  email       = local.acme_email
}

output "cf_api_endpoint" {
  description = "Cloud Foundry API endpoint"
  value       = module.cf-for-k8s.cf_api_endpoint
}

output "cf_admin_username" {
  description = "Cloud Foundry admin username"
  value       = module.cf-for-k8s.cf_admin_username
}

output "cf_admin_password" {
  description = "Cloud Foundry admin password"
  value       = module.cf-for-k8s.cf_admin_password
}